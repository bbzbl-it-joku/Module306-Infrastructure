#==============================================================================
# AlmaLinux 9 Kickstart Configuration
#==============================================================================
# Purpose: Automated installation of AlmaLinux 9 for Proxmox templates
# Author:  Joshua Kunz
# Date:    April 20, 2025
# Version: 1.1 - Fixed disk detection and partitioning
#
# This kickstart file:
# - Configures an unattended installation of AlmaLinux 9
# - Sets up appropriate disk partitioning for VM templates
# - Configures networking and system services
# - Prepares the system for cloud-init integration
#==============================================================================

#------------------------------------------------------------------------------
# Installation Mode
#------------------------------------------------------------------------------
# Use text-based installer instead of graphical
text

#------------------------------------------------------------------------------
# Pre-installation Script
#------------------------------------------------------------------------------
%pre
# Log available block devices for debugging
echo "Available block devices:" > /tmp/pre-install.log
lsblk >> /tmp/pre-install.log
ls -la /dev/[sv]da* >> /tmp/pre-install.log 2>&1 || true
ls -la /dev/nvme* >> /tmp/pre-install.log 2>&1 || true
%end

#------------------------------------------------------------------------------
# Basic Configuration
#------------------------------------------------------------------------------
# Accept EULA automatically
eula --agreed

# Disable firstboot
firstboot --disabled

# System language
lang en_US.UTF-8

# Keyboard layouts (primary: Swiss, secondary: US)
keyboard --xlayouts='ch','us'

#------------------------------------------------------------------------------
# Network Configuration
#------------------------------------------------------------------------------
# Configure network with DHCP
network --bootproto=dhcp --device=link --ipv6=auto --activate
network --hostname=almalinux9-template

#------------------------------------------------------------------------------
# Installation Source
#------------------------------------------------------------------------------
# Use CDROM as installation media
cdrom

#------------------------------------------------------------------------------
# Package Selection
#------------------------------------------------------------------------------
%packages
# Base environment
@^minimal-environment

# Essential system utilities (packages that are definitely available)
rsync
tar
zip
unzip
curl
NetworkManager

# Security packages
policycoreutils
selinux-policy-targeted

# Note: cloud-init and cloud-utils-growpart will be installed via DNF post-install
# as they might not be available in the minimal ISO

# Remove unnecessary packages to save space
-iwl*firmware
-aic94xx-firmware
-alsa-*
-ivtv-firmware
%end

#------------------------------------------------------------------------------
# Disk Partitioning - Updated for better compatibility
#------------------------------------------------------------------------------
# Clear the primary disk (automatically detected)
zerombr
clearpart --all --initlabel

# Use automatic partitioning but override with custom layout
# This ensures compatibility with different disk types (sda, vda, nvme)
part /boot/efi --fstype=efi --size=512 --fsoptions="umask=0077,shortname=winnt"
part /boot --fstype=xfs --size=1024
part pv.01 --fstype=lvmpv --size=1 --grow

# Volume Group
volgroup vg_root pv.01

# Logical Volumes - Simplified layout
logvol / --fstype=xfs --size=1 --grow --vgname=vg_root --name=lv_root
logvol swap --fstype=swap --size=1024 --vgname=vg_root --name=lv_swap

# Bootloader configuration
bootloader --location=mbr --append="console=tty0 console=ttyS0,115200n8 net.ifnames=0 biosdevname=0"

#------------------------------------------------------------------------------
# System Settings
#------------------------------------------------------------------------------
# System timezone
timezone Europe/Zurich --utc

# Root password
# Use this to generate the hash : python3 -c 'import crypt; print(crypt.crypt("PASSWORD-HERE", crypt.mksalt(crypt.METHOD_SHA512)))'
rootpw --iscrypted --allow-ssh $6$SCrpowgGquZoY8dl$fw7ZqMP7vMEjrizwgf0OKBwtXaNusFGqb9BFt8tGs3o3yx3NKDd2Ix0ZIz46yauEBBVqirpWQIDQIoLS6I8u2.

# Enable SSH for root
services --enabled=sshd

#------------------------------------------------------------------------------
# SELinux Configuration
#------------------------------------------------------------------------------
selinux --enforcing

#------------------------------------------------------------------------------
# Firewall Configuration
#------------------------------------------------------------------------------
firewall --enabled --ssh

#------------------------------------------------------------------------------
# Kdump Configuration
#------------------------------------------------------------------------------
# Disable kdump to save memory in template
%addon com_redhat_kdump --disable
%end

#------------------------------------------------------------------------------
# Post-installation Script
#------------------------------------------------------------------------------
%post --log=/root/ks-post.log

# Install packages that might not be available during kickstart
dnf install -y epel-release
dnf install -y cloud-init cloud-utils-growpart dnf-utils qemu-guest-agent wget vim-enhanced

# Configure console
cat > /etc/default/grub << 'EOF'
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console"
GRUB_CMDLINE_LINUX="console=tty0 console=ttyS0,115200n8 net.ifnames=0 biosdevname=0"
GRUB_DISABLE_RECOVERY="true"
EOF

# Rebuild GRUB configuration
grub2-mkconfig -o /boot/grub2/grub.cfg

# Configure keyboard layout
cat > /etc/vconsole.conf << 'EOF'
KEYMAP="ch"
FONT="eurlatgr"
EOF

# Enable and configure services
systemctl enable qemu-guest-agent
systemctl enable NetworkManager
systemctl enable cloud-init
systemctl enable cloud-config
systemctl enable cloud-final
systemctl enable cloud-init-local

# Configure sudo for cloud-init user
echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/wheel

# Clean up
dnf clean all
rm -rf /var/cache/dnf/*

# Log completion
echo "Post-installation completed successfully at $(date)" >> /root/ks-post.log
%end

#------------------------------------------------------------------------------
# Reboot after installation
#------------------------------------------------------------------------------
reboot --eject